{
    "erlang gen_server behavior" : {
        "prefix" : "erl-gen_server-behavior",
        "body"  : [
            "-behaviour(gen_server).",
            "",
            "%% API",
            "-export([start/1, stop/1, start_link/1]).",
            "-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).",
            "-record(state, {dummy}).",
            "start(Name) ->",
            "    $0_sup:start_child(Name).",
            "",
            "stop(Name) ->",
            "    gen_server:call(Name, stop).",
            "",
            "start_link(Name) ->",
            "    gen_server:start_link({local, Name}, ?MODULE, [], []).",
            "",
            "init(_Args) ->",
            "    {ok, #state{dummy=1}}.",
            "",
            "handle_call(stop, _From, State) ->",
            "    {stop, normal, stopped, State};",
            "",
            "handle_call(_Request, _From, State) ->",
            "    {reply, ok, State}.",
            "",
            "handle_cast(_Msg, State) ->",
            "    {noreply, State}.",
            "",
            "handle_info(_Info, State) ->",
            "    {noreply, State}.",
            "",
            "terminate(_Reason, _State) ->",
            "    ok.",
            "",
            "code_change(_OldVsn, State, _Extra) ->",
            "    {ok, State}.",
            ""
        ],
        "description" : "generate an empty gen_server"
    },

    "erlang supervisor behavior" : {
        "prefix" : "erl-supervisor-behavior",
        "body"  : [
            "-behaviour(supervisor).",
            "",
            "%% API",
            "-export([start_link/0]).",
            "-export([init/1]).",
            "",
            "start_link() ->",
            "    supervisor:start_link({local, ?MODULE}, ?MODULE, []).",
            "",
            "init(_Args) ->",
            "    SupervisorSpecification = #{",
            "        strategy => one_for_one, % one_for_one | one_for_all | rest_for_one | simple_one_for_one",
            "        intensity => 10,",
            "        period => 60},",
            "",
            "    ChildSpecifications = [",
            "        #{",
            "            id => some_worker,",
            "            start => {some_worker, start_link, []},",
            "            restart => permanent, % permanent | transient | temporary",
            "            shutdown => 2000,",
            "            type => worker, % worker | supervisor",
            "            modules => [some_worker]",
            "        }",
            "    ],",
            "",
            "    {ok, {SupervisorSpecification, ChildSpecifications}}.",
            ""
        ],
        "description" : "generate an example of supervisor"
    },

    "erlang gen_fsm behavior" : {
        "prefix" : "erl-gen_fsm-behavior",
        "body" : [
            "-behaviour(gen_fsm).",
            "",
            "%% API",
            "-export([start/1, stop/1, start_link/1]).",
            "-export([init/1, handle_event/3, handle_sync_event/4, handle_info/3,",
            "         terminate/3, code_change/4,",
            "         dummy_state/2, dummy_state/3]).",
            "",
            "-record(state, {dummy}).",
            "",
            "start(Name) ->",
            "    gen_fsm:start(?MODULE, [Name], []).",
            "",
            "stop(FsmRef) ->",
            "    gen_fsm:stop(FsmRef).",
            "",
            "start_link(Name) ->",
            "    gen_fsm:start_link({local, Name}, ?MODULE, [Name], []).",
            "",
            "init(_Args) ->",
            "    {ok, dummy_state, #state{dummy=1}}.",
            "",
            "dummy_state(_Event, StateData) ->",
            "    {next_state, dummy_state, StateData}.",
            "",
            "dummy_state(_Event, From, StateData) ->",
            "    gen_fsm:reply(From, ok),",
            "    {next_state, dummy_state, StateData}.",
            "",
            "handle_event(_Event, _StateName, StateData) ->",
            "    {next_state, dummy_state, StateData}.",
            "",
            "handle_sync_event(_Event, From, _StateName, StateData) ->",
            "    gen_fsm:reply(From, ok),",
            "    {next_state, dummy_state, StateData}.",
            "",
            "handle_info(_Info, _StateName, StateData) ->",
            "    {next_state, dummy_state, StateData}.",
            "",
            "terminate(_Reason, _StateName, _StateData) ->",
            "    ok.",
            "",
            "code_change(_OldVersion, _StateName, StateData, _Extra) ->",
            "    {ok, dummy_state, StateData}.",
            ""
        ],
        "description" : "generate an empty gen_fsm"
    },

    "erlang gen_event behavior" : {
        "prefix" : "erl-gen_event-behavior",
        "body"  : [
            "-behaviour(gen_event).",
            "",
            "-export([init/1, handle_event/2, handle_call/2, handle_info/2, terminate/2, code_change/3]).",
            "",
            "init(_Args) ->",
            "    {ok, []}.",
            "",
            "handle_event(_Event, State) ->",
            "    {ok, State}.",
            "",
            "handle_call(_Request, State) ->",
            "    {ok, no_reply, State}.",
            "",
            "handle_info(_Info, State) ->",
            "    {ok, State}.",
            "",
            "terminate(_Args, _State) ->",
            "    ok.",
            "",
            "code_change(_OldVsn, State, _Extra) ->",
            "    {ok, State}.",
            ""
        ],
        "description" : "generate an empty gen_event"
    },

    "erlang gen_statem behavior" : {
        "prefix" : "erl-gen_statem-behavior",
        "body"  : [
            "-behaviour(gen_statem).",
            "",
            "-export([stop/0, start_link/0]).",
            "-export([init/1, callback_mode/0, handle_event/4, terminate/3, code_change/4]).",
            "",
            "stop() ->",
            "    gen_statem:stop(?MODULE).",
            "",
            "start_link() ->",
            "    gen_statem:start_link({local, ?MODULE}, ?MODULE, [], []).",
            "",
            "init(_Args) ->",
            "    {ok, state, []}.",
            "",
            "%% state_functions | handle_event_function | [_, state_enter].",
            "callback_mode() ->",
            "    handle_event_function.",
            "",
            "handle_event(enter, _OldState, _State, _Data) ->",
            "    keep_state_and_data;",
            "",
            "handle_event(_EventType, _EventContent, _State, _Data) ->",
            "    keep_state_and_data.",
            "",
            "terminate(_Reason, _State, _Data) ->",
            "    ok.",
            "",
            "code_change(_OldVsn, State, Data, _Extra) ->",
            "    {ok, State, Data}.",
            ""
        ],
        "description" : "generate an empty gen_statem"
    }
}